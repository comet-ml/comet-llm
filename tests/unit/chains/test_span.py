import box
import pytest
from testix import *
from testix import saveargument

from comet_llm.chains import span


@pytest.fixture(autouse=True)
def mock_imports(patch_module):
    patch_module(span, "state")
    patch_module(span, "datetimes")
    patch_module(span, "convert")


def _construct(
        inputs,
        category,
        name,
        metadata,
        id,
        parent_ids,
    ):
    with Scenario() as s:
        s.state.get_new_id() >> id
        s.state.get_global_chain() >> Fake("global_chain", context=Fake("context"))
        s.global_chain.track_node(saveargument.SaveArgument("node"))
        s.context.current() >> parent_ids
        s.datetimes.Timer() >> Fake("timer")

        tested = span.Span(
            inputs=inputs,
            category=category,
            name=name,
            metadata=metadata,
        )

        assert saveargument.saved()["node"] is tested

    return tested

def test_construct__name_not_defined__name_generated_from_category():
    NOT_DEFINED = None

    with Scenario() as s:
        s.state.get_new_id() >> NOT_DEFINED
        s.state.get_global_chain() >> Fake("global_chain", context=Fake("context"))
        s.global_chain.track_node(saveargument.SaveArgument("node"))
        s.context.current()
        s.global_chain.generate_node_name("some-category") >> "autogenerated-name"

        s.datetimes.Timer() >> box.Box(
            start_timestamp=NOT_DEFINED,
            end_timestamp=NOT_DEFINED,
            duration=NOT_DEFINED
        )

        tested = span.Span(
            inputs=NOT_DEFINED,
            category="some-category",
        )
        assert saveargument.saved()["node"] is tested
        assert tested.name == "autogenerated-name"
        


def test_construct__chain_passed_to_init__global_chain_not_used():
    NOT_DEFINED = None

    passed_chain = Fake("passed_chain")
    with Scenario() as s:
        s.state.get_new_id() >> NOT_DEFINED
        s.passed_chain.track_node(saveargument.SaveArgument("node"))
        s.passed_chain.context.current()
        s.passed_chain.generate_node_name("some-category") >> "autogenerated-name"

        s.datetimes.Timer() >> box.Box(
            start_timestamp=NOT_DEFINED,
            end_timestamp=NOT_DEFINED,
            duration=NOT_DEFINED
        )

        tested = span.Span(
            inputs=NOT_DEFINED,
            category="some-category",
            chain=passed_chain,
        )
        assert saveargument.saved()["node"] is tested
        


def _use_context_manager_scenario(
        s,
        tested,
        id,
        start_timestamp,
        end_timestamp,
        duration
    ):
    s.timer.start()
    s.global_chain.context.add(id)
    with tested:
        s.timer.stop()
        s.global_chain.context.pop()

    timer = Fake("timer")
    timer.duration = duration
    timer.start_timestamp = start_timestamp
    timer.end_timestamp = end_timestamp




def test_as_dict__input_and_output_are_not_dicts__input_and_output_turned_into_dicts():
    NOT_DEFINED = None

    tested = _construct(
        inputs="the-inputs",
        name="some-name",
        category=NOT_DEFINED,
        metadata=NOT_DEFINED,
        id=NOT_DEFINED,
        parent_ids=NOT_DEFINED,
    )
    tested.set_outputs(
        outputs="the-outputs",
        metadata=NOT_DEFINED
    )

    assert tested.as_dict()["inputs"] == {"input": "the-inputs"}
    assert tested.as_dict()["outputs"] == {"output": "the-outputs"}


def test_lifecycle__happyflow():
    START_TIMESTAMP = 10
    END_TIMESTAMP = 15
    DURATION = 5

    tested = _construct(
        inputs={"input-key": "input-value"},
        name="the-name",
        category="the-category",
        metadata={"metadata-key": "value-1"},
        id="the-id",
        parent_ids="parent-ids",
    )
    tested.set_outputs(
        outputs={"output-key": "output-value"},
    )

    with Scenario() as s:
        _use_context_manager_scenario(
            s, tested, "the-id", START_TIMESTAMP, END_TIMESTAMP, DURATION
        )
        assert tested.as_dict() == {
            "id": "the-id",
            "category": "the-category",
            "name": "the-name",
            "inputs": {"input-key": "input-value"},
            "outputs": {"output-key": "output-value"},
            "duration": DURATION,
            "start_timestamp": START_TIMESTAMP,
            "end_timestamp": END_TIMESTAMP,
            "parent_ids": "parent-ids",
            "metadata": {"metadata-key": "value-1"},
        }


def test_set_output__new_metadata_is_not_None__existing_metadata_is_merged_with_the_new_one():
    NOT_DEFINED = None

    tested = _construct(
        inputs=NOT_DEFINED,
        name="some-name",
        category=NOT_DEFINED,
        metadata={"existing-key": "existing-value"},
        id=NOT_DEFINED,
        parent_ids=NOT_DEFINED,
    )
    tested.set_outputs(
        outputs=NOT_DEFINED,
        metadata={"new-key": "new-value"}
    )

    assert tested.as_dict()["metadata"] == {
        "existing-key": "existing-value",
        "new-key": "new-value",
    }
